#!/usr/bin/env python
"""
Content Management System CLI Tool

Command-line interface for managing the academic content management system.
Provides commands for content management, analytics, maintenance, and administration.
"""

import os
import sys
import json
import argparse
from pathlib import Path
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

# Add the agents directory to the path
sys.path.append(str(Path(__file__).parent.parent / "agents"))

from academic.content_management_system import (
    ContentManagementSystem, CourseInfo, ContentItem, ContentType,
    ProcessingStatus, ChangeType, ContentRelationship
)


class CMSCLITool:
    """Command-line interface for the Content Management System"""
    
    def __init__(self, base_path: str):
        self.base_path = Path(base_path)
        self.cms = ContentManagementSystem(str(self.base_path))
        
    def create_course(self, args):
        """Create a new course"""
        try:
            course = CourseInfo(
                course_id=args.course_id,
                course_name=args.name,
                course_code=args.code,
                academic_year=args.year,
                semester=args.semester,
                instructor=args.instructor,
                department=args.department,
                description=args.description,
                credits=args.credits
            )
            
            success = self.cms.create_course(course)
            if success:
                print(f"‚úÖ Course created successfully: {course.course_id}")
                return True
            else:
                print(f"‚ùå Failed to create course: {course.course_id}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error creating course: {str(e)}\")\n            return False\n    \n    def list_courses(self, args):\n        \"\"\"List all courses\"\"\"\n        try:\n            courses = self.cms.list_courses()\n            \n            if not courses:\n                print(\"No courses found.\")\n                return\n            \n            print(f\"\\nüìö Found {len(courses)} course(s):\\n\")\n            \n            for course in courses:\n                print(f\"Course ID: {course.course_id}\")\n                print(f\"Name: {course.course_name}\")\n                print(f\"Code: {course.course_code}\")\n                print(f\"Year: {course.academic_year}\")\n                print(f\"Semester: {course.semester}\")\n                print(f\"Instructor: {course.instructor}\")\n                print(f\"Department: {course.department}\")\n                if course.description:\n                    print(f\"Description: {course.description}\")\n                print(f\"Created: {course.created_date.strftime('%Y-%m-%d %H:%M')}\")\n                print(\"‚îÄ\" * 50)\n                \n        except Exception as e:\n            print(f\"‚ùå Error listing courses: {str(e)}\")\n    \n    def import_content(self, args):\n        \"\"\"Import content from file paths\"\"\"\n        try:\n            search_paths = args.paths if isinstance(args.paths, list) else [args.paths]\n            \n            print(f\"üîÑ Importing content from {len(search_paths)} path(s)...\")\n            \n            result = self.cms.consolidate_content(search_paths, args.course_id)\n            \n            if result.success:\n                print(f\"‚úÖ Content import completed successfully\")\n                print(f\"üìÑ Processed files: {len(result.processed_files)}\")\n                print(f\"‚è≠Ô∏è Skipped files: {len(result.skipped_files)}\")\n                \n                if result.errors:\n                    print(f\"‚ö†Ô∏è Errors encountered: {len(result.errors)}\")\n                    for error in result.errors[:5]:  # Show first 5 errors\n                        print(f\"   - {error}\")\n                \n                return True\n            else:\n                print(f\"‚ùå Content import failed\")\n                if result.errors:\n                    for error in result.errors:\n                        print(f\"   Error: {error}\")\n                return False\n                \n        except Exception as e:\n            print(f\"‚ùå Error importing content: {str(e)}\")\n            return False\n    \n    def list_content(self, args):\n        \"\"\"List content with optional filters\"\"\"\n        try:\n            # Parse content type\n            content_type = None\n            if args.type:\n                try:\n                    content_type = ContentType(args.type)\n                except ValueError:\n                    print(f\"‚ùå Invalid content type: {args.type}\")\n                    print(f\"Valid types: {[t.value for t in ContentType]}\")\n                    return\n            \n            content_items = self.cms.list_content(\n                course_id=args.course_id,\n                content_type=content_type,\n                week_number=args.week,\n                limit=args.limit\n            )\n            \n            if not content_items:\n                print(\"No content found matching the criteria.\")\n                return\n            \n            print(f\"\\nüìÑ Found {len(content_items)} content item(s):\\n\")\n            \n            for item in content_items:\n                print(f\"ID: {item.content_id}\")\n                print(f\"Title: {item.title}\")\n                print(f\"Type: {item.content_type.value}\")\n                print(f\"Course: {item.course_id}\")\n                if item.week_number:\n                    print(f\"Week: {item.week_number}\")\n                print(f\"Status: {item.processing_status.value}\")\n                if item.quality_score:\n                    print(f\"Quality: {item.quality_score:.2f}\")\n                print(f\"Size: {item.file_size:,} bytes\")\n                print(f\"Modified: {item.modified_date.strftime('%Y-%m-%d %H:%M')}\")\n                print(\"‚îÄ\" * 50)\n                \n        except Exception as e:\n            print(f\"‚ùå Error listing content: {str(e)}\")\n    \n    def search_content(self, args):\n        \"\"\"Search content\"\"\"\n        try:\n            # Parse content type\n            content_type = None\n            if args.type:\n                try:\n                    content_type = ContentType(args.type)\n                except ValueError:\n                    print(f\"‚ùå Invalid content type: {args.type}\")\n                    return\n            \n            results = self.cms.search_content(\n                query=args.query,\n                course_id=args.course_id,\n                content_type=content_type,\n                week_number=args.week,\n                limit=args.limit\n            )\n            \n            if not results:\n                print(f\"No content found for query: '{args.query}'\")\n                return\n            \n            print(f\"\\nüîç Found {len(results)} result(s) for '{args.query}':\\n\")\n            \n            for content_item, relevance_score in results:\n                print(f\"ID: {content_item.content_id}\")\n                print(f\"Title: {content_item.title}\")\n                print(f\"Type: {content_item.content_type.value}\")\n                print(f\"Relevance: {relevance_score:.2f}\")\n                if content_item.week_number:\n                    print(f\"Week: {content_item.week_number}\")\n                if content_item.description:\n                    # Show first 100 characters of description\n                    desc = content_item.description[:100]\n                    if len(content_item.description) > 100:\n                        desc += \"...\"\n                    print(f\"Description: {desc}\")\n                print(\"‚îÄ\" * 50)\n                \n        except Exception as e:\n            print(f\"‚ùå Error searching content: {str(e)}\")\n    \n    def show_content(self, args):\n        \"\"\"Show detailed information about a content item\"\"\"\n        try:\n            content_item = self.cms.get_content(args.content_id)\n            \n            if not content_item:\n                print(f\"‚ùå Content not found: {args.content_id}\")\n                return\n            \n            print(f\"\\nüìÑ Content Details:\\n\")\n            print(f\"ID: {content_item.content_id}\")\n            print(f\"Title: {content_item.title}\")\n            print(f\"Type: {content_item.content_type.value}\")\n            print(f\"Course: {content_item.course_id}\")\n            print(f\"Original Filename: {content_item.original_filename}\")\n            print(f\"File Path: {content_item.file_path}\")\n            print(f\"File Size: {content_item.file_size:,} bytes\")\n            print(f\"MIME Type: {content_item.mime_type}\")\n            print(f\"File Hash: {content_item.file_hash}\")\n            \n            if content_item.week_number:\n                print(f\"Week: {content_item.week_number}\")\n            if content_item.chapter_number:\n                print(f\"Chapter: {content_item.chapter_number}\")\n            if content_item.section_number:\n                print(f\"Section: {content_item.section_number}\")\n            \n            print(f\"Processing Status: {content_item.processing_status.value}\")\n            \n            if content_item.quality_score:\n                print(f\"Quality Score: {content_item.quality_score:.2f}\")\n            \n            if content_item.tags:\n                print(f\"Tags: {', '.join(content_item.tags)}\")\n            if content_item.keywords:\n                print(f\"Keywords: {', '.join(content_item.keywords)}\")\n            \n            if content_item.description:\n                print(f\"Description: {content_item.description}\")\n            \n            if content_item.author:\n                print(f\"Author: {content_item.author}\")\n            if content_item.source_url:\n                print(f\"Source URL: {content_item.source_url}\")\n            \n            print(f\"Language: {content_item.language}\")\n            print(f\"Access Count: {content_item.access_count}\")\n            \n            print(f\"Created: {content_item.created_date.strftime('%Y-%m-%d %H:%M:%S')}\")\n            print(f\"Modified: {content_item.modified_date.strftime('%Y-%m-%d %H:%M:%S')}\")\n            \n            if content_item.accessed_date:\n                print(f\"Last Accessed: {content_item.accessed_date.strftime('%Y-%m-%d %H:%M:%S')}\")\n            \n            if content_item.metadata:\n                print(f\"\\nMetadata:\")\n                for key, value in content_item.metadata.items():\n                    print(f\"  {key}: {value}\")\n            \n            # Show relationships\n            relationships = self.cms.get_relationships(args.content_id)\n            if relationships:\n                print(f\"\\nüîó Relationships ({len(relationships)}):\")\n                for rel in relationships[:5]:  # Show first 5\n                    target_id = rel.target_content_id if rel.source_content_id == args.content_id else rel.source_content_id\n                    print(f\"  {rel.relationship_type} ‚Üí {target_id} (strength: {rel.strength:.2f})\")\n                \n                if len(relationships) > 5:\n                    print(f\"  ... and {len(relationships) - 5} more\")\n            \n            # Show versions\n            versions = self.cms.get_versions(args.content_id)\n            if versions:\n                print(f\"\\nüìö Versions ({len(versions)}):\")\n                for version in versions[:3]:  # Show first 3\n                    print(f\"  v{version.version_number}: {version.change_description} by {version.author}\")\n                    print(f\"    Created: {version.created_date.strftime('%Y-%m-%d %H:%M')}\")\n                \n                if len(versions) > 3:\n                    print(f\"  ... and {len(versions) - 3} more versions\")\n            \n        except Exception as e:\n            print(f\"‚ùå Error showing content: {str(e)}\")\n    \n    def detect_relationships(self, args):\n        \"\"\"Detect relationships for content\"\"\"\n        try:\n            if args.content_id:\n                content_ids = [args.content_id]\n            else:\n                # Detect for all content in course\n                content_items = self.cms.list_content(course_id=args.course_id)\n                content_ids = [item.content_id for item in content_items]\n            \n            print(f\"üîÑ Detecting relationships for {len(content_ids)} content item(s)...\")\n            \n            total_relationships = 0\n            for content_id in content_ids:\n                relationships = self.cms.detect_relationships(content_id, auto_create=True)\n                total_relationships += len(relationships)\n                \n                if args.verbose and relationships:\n                    print(f\"  {content_id}: {len(relationships)} relationships detected\")\n            \n            print(f\"‚úÖ Relationship detection completed\")\n            print(f\"üîó Total relationships detected: {total_relationships}\")\n            \n        except Exception as e:\n            print(f\"‚ùå Error detecting relationships: {str(e)}\")\n    \n    def build_search_index(self, args):\n        \"\"\"Build or rebuild search index\"\"\"\n        try:\n            print(\"üîÑ Building search index...\")\n            \n            success = self.cms.build_search_index(args.content_id)\n            \n            if success:\n                print(\"‚úÖ Search index built successfully\")\n            else:\n                print(\"‚ùå Failed to build search index\")\n                \n        except Exception as e:\n            print(f\"‚ùå Error building search index: {str(e)}\")\n    \n    def quality_assessment(self, args):\n        \"\"\"Perform quality assessment on content\"\"\"\n        try:\n            if args.content_id:\n                content_ids = [args.content_id]\n            else:\n                # Assess all content in course\n                content_items = self.cms.list_content(course_id=args.course_id)\n                content_ids = [item.content_id for item in content_items]\n            \n            print(f\"üîÑ Performing quality assessment on {len(content_ids)} content item(s)...\")\n            \n            total_assessed = 0\n            total_passed = 0\n            \n            for content_id in content_ids:\n                evaluation = self.cms.quality_assessment(content_id)\n                \n                if evaluation:\n                    total_assessed += 1\n                    if evaluation.approved:\n                        total_passed += 1\n                    \n                    if args.verbose:\n                        print(f\"  {content_id}: {evaluation.quality_score:.2f} ({'PASS' if evaluation.approved else 'FAIL'})\")\n            \n            print(f\"‚úÖ Quality assessment completed\")\n            print(f\"üìä Assessed: {total_assessed}, Passed: {total_passed}\")\n            \n            if total_assessed > 0:\n                pass_rate = (total_passed / total_assessed) * 100\n                print(f\"üìà Pass rate: {pass_rate:.1f}%\")\n            \n        except Exception as e:\n            print(f\"‚ùå Error performing quality assessment: {str(e)}\")\n    \n    def generate_analytics(self, args):\n        \"\"\"Generate analytics report\"\"\"\n        try:\n            print(\"üîÑ Generating analytics report...\")\n            \n            # Parse date range\n            start_date = None\n            end_date = None\n            \n            if args.start_date:\n                start_date = datetime.strptime(args.start_date, \"%Y-%m-%d\")\n            if args.end_date:\n                end_date = datetime.strptime(args.end_date, \"%Y-%m-%d\")\n            \n            report = self.cms.generate_analytics_report(\n                course_id=args.course_id,\n                start_date=start_date,\n                end_date=end_date\n            )\n            \n            if not report:\n                print(\"‚ùå Failed to generate analytics report\")\n                return\n            \n            print(f\"‚úÖ Analytics report generated: {report['report_id']}\")\n            \n            # Display summary\n            content_stats = report.get('content_statistics', {})\n            processing_stats = report.get('processing_statistics', {})\n            quality_stats = report.get('quality_statistics', {})\n            usage_stats = report.get('usage_statistics', {})\n            \n            print(f\"\\nüìä Analytics Summary:\")\n            print(f\"\\nüìÑ Content Statistics:\")\n            print(f\"  Total Content: {content_stats.get('total_content', 0)}\")\n            \n            content_by_type = content_stats.get('content_by_type', {})\n            for content_type, count in content_by_type.items():\n                print(f\"  {content_type.title()}: {count}\")\n            \n            if processing_stats:\n                print(f\"\\n‚öôÔ∏è Processing Statistics:\")\n                print(f\"  Total Operations: {processing_stats.get('total_operations', 0)}\")\n                print(f\"  Success Rate: {processing_stats.get('success_rate', 0):.1%}\")\n                print(f\"  Avg Processing Time: {processing_stats.get('average_processing_time', 0):.2f}s\")\n            \n            if quality_stats:\n                print(f\"\\nüéØ Quality Statistics:\")\n                print(f\"  Average Quality Score: {quality_stats.get('average_quality_score', 0):.2f}\")\n            \n            if usage_stats:\n                print(f\"\\nüìà Usage Statistics:\")\n                print(f\"  Total Accesses: {usage_stats.get('total_accesses', 0)}\")\n            \n            # Save report to file if requested\n            if args.output:\n                output_path = Path(args.output)\n                with open(output_path, 'w', encoding='utf-8') as f:\n                    json.dump(report, f, indent=2, default=str)\n                print(f\"\\nüíæ Report saved to: {output_path}\")\n            \n        except Exception as e:\n            print(f\"‚ùå Error generating analytics: {str(e)}\")\n    \n    def show_processing_history(self, args):\n        \"\"\"Show processing history\"\"\"\n        try:\n            records = self.cms.get_processing_history(\n                content_id=args.content_id,\n                agent_id=args.agent_id,\n                operation=args.operation,\n                limit=args.limit\n            )\n            \n            if not records:\n                print(\"No processing history found.\")\n                return\n            \n            print(f\"\\nüìú Processing History ({len(records)} record(s)):\\n\")\n            \n            for record in records:\n                print(f\"Record ID: {record.record_id}\")\n                print(f\"Content ID: {record.content_id}\")\n                print(f\"Operation: {record.operation}\")\n                print(f\"Agent: {record.agent_id}\")\n                print(f\"Success: {'‚úÖ' if record.success else '‚ùå'}\")\n                print(f\"Processing Time: {record.processing_time:.2f}s\")\n                \n                if record.quality_score:\n                    print(f\"Quality Score: {record.quality_score:.2f}\")\n                \n                if record.error_message:\n                    print(f\"Error: {record.error_message}\")\n                \n                print(f\"Created: {record.created_date.strftime('%Y-%m-%d %H:%M:%S')}\")\n                print(\"‚îÄ\" * 50)\n                \n        except Exception as e:\n            print(f\"‚ùå Error showing processing history: {str(e)}\")\n    \n    def maintenance(self, args):\n        \"\"\"Perform maintenance operations\"\"\"\n        try:\n            print(\"üîß Starting maintenance operations...\")\n            \n            if args.operation == \"vacuum_db\":\n                print(\"üóÉÔ∏è Vacuuming database...\")\n                # Database vacuum operation would go here\n                print(\"‚úÖ Database vacuum completed\")\n                \n            elif args.operation == \"rebuild_index\":\n                print(\"üîç Rebuilding search index...\")\n                success = self.cms.build_search_index()\n                if success:\n                    print(\"‚úÖ Search index rebuilt successfully\")\n                else:\n                    print(\"‚ùå Failed to rebuild search index\")\n                    \n            elif args.operation == \"cleanup_orphans\":\n                print(\"üßπ Cleaning up orphaned files...\")\n                # Orphan cleanup operation would go here\n                print(\"‚úÖ Orphan cleanup completed\")\n                \n            elif args.operation == \"detect_all_relationships\":\n                print(\"üîó Detecting all relationships...\")\n                content_items = self.cms.list_content()\n                total_relationships = 0\n                \n                for item in content_items:\n                    relationships = self.cms.detect_relationships(item.content_id, auto_create=True)\n                    total_relationships += len(relationships)\n                \n                print(f\"‚úÖ Relationship detection completed\")\n                print(f\"üîó Total relationships: {total_relationships}\")\n                \n            else:\n                print(f\"‚ùå Unknown maintenance operation: {args.operation}\")\n                \n        except Exception as e:\n            print(f\"‚ùå Error during maintenance: {str(e)}\")\n    \n    def shutdown(self):\n        \"\"\"Shutdown the CMS\"\"\"\n        try:\n            self.cms.shutdown()\n            print(\"üëã CMS shutdown complete\")\n        except Exception as e:\n            print(f\"‚ùå Error during shutdown: {str(e)}\")\n\n\ndef main():\n    \"\"\"Main CLI entry point\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Content Management System CLI\",\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        epilog=\"\"\"\nExamples:\n  %(prog)s --base-path /path/to/cms create-course --course-id CS101 --name \"Intro to CS\" --code CS101 --year 2023 --semester Fall --instructor \"Dr. Smith\" --department \"Computer Science\"\n  %(prog)s --base-path /path/to/cms import-content --course-id CS101 --paths /path/to/content/\n  %(prog)s --base-path /path/to/cms search --query \"algorithms\" --course-id CS101\n  %(prog)s --base-path /path/to/cms analytics --course-id CS101 --output report.json\n        \"\"\"\n    )\n    \n    parser.add_argument(\"--base-path\", required=True, help=\"Base path for CMS\")\n    parser.add_argument(\"--verbose\", \"-v\", action=\"store_true\", help=\"Verbose output\")\n    \n    subparsers = parser.add_subparsers(dest=\"command\", help=\"Available commands\")\n    \n    # Course commands\n    course_parser = subparsers.add_parser(\"create-course\", help=\"Create a new course\")\n    course_parser.add_argument(\"--course-id\", required=True, help=\"Course ID\")\n    course_parser.add_argument(\"--name\", required=True, help=\"Course name\")\n    course_parser.add_argument(\"--code\", required=True, help=\"Course code\")\n    course_parser.add_argument(\"--year\", required=True, help=\"Academic year\")\n    course_parser.add_argument(\"--semester\", required=True, help=\"Semester\")\n    course_parser.add_argument(\"--instructor\", required=True, help=\"Instructor name\")\n    course_parser.add_argument(\"--department\", required=True, help=\"Department\")\n    course_parser.add_argument(\"--description\", help=\"Course description\")\n    course_parser.add_argument(\"--credits\", type=int, help=\"Number of credits\")\n    \n    list_courses_parser = subparsers.add_parser(\"list-courses\", help=\"List all courses\")\n    \n    # Content commands\n    import_parser = subparsers.add_parser(\"import-content\", help=\"Import content from paths\")\n    import_parser.add_argument(\"--course-id\", required=True, help=\"Course ID\")\n    import_parser.add_argument(\"--paths\", nargs=\"+\", required=True, help=\"Paths to import from\")\n    \n    list_content_parser = subparsers.add_parser(\"list-content\", help=\"List content\")\n    list_content_parser.add_argument(\"--course-id\", help=\"Filter by course ID\")\n    list_content_parser.add_argument(\"--type\", help=\"Filter by content type\")\n    list_content_parser.add_argument(\"--week\", type=int, help=\"Filter by week number\")\n    list_content_parser.add_argument(\"--limit\", type=int, default=50, help=\"Limit results\")\n    \n    search_parser = subparsers.add_parser(\"search\", help=\"Search content\")\n    search_parser.add_argument(\"--query\", required=True, help=\"Search query\")\n    search_parser.add_argument(\"--course-id\", help=\"Filter by course ID\")\n    search_parser.add_argument(\"--type\", help=\"Filter by content type\")\n    search_parser.add_argument(\"--week\", type=int, help=\"Filter by week number\")\n    search_parser.add_argument(\"--limit\", type=int, default=20, help=\"Limit results\")\n    \n    show_parser = subparsers.add_parser(\"show-content\", help=\"Show content details\")\n    show_parser.add_argument(\"--content-id\", required=True, help=\"Content ID\")\n    \n    # Relationship commands\n    rel_parser = subparsers.add_parser(\"detect-relationships\", help=\"Detect content relationships\")\n    rel_parser.add_argument(\"--content-id\", help=\"Specific content ID (otherwise all in course)\")\n    rel_parser.add_argument(\"--course-id\", help=\"Course ID for bulk detection\")\n    \n    # Index commands\n    index_parser = subparsers.add_parser(\"build-index\", help=\"Build search index\")\n    index_parser.add_argument(\"--content-id\", help=\"Specific content ID (otherwise all)\")\n    \n    # Quality commands\n    quality_parser = subparsers.add_parser(\"quality-assessment\", help=\"Perform quality assessment\")\n    quality_parser.add_argument(\"--content-id\", help=\"Specific content ID (otherwise all in course)\")\n    quality_parser.add_argument(\"--course-id\", help=\"Course ID for bulk assessment\")\n    \n    # Analytics commands\n    analytics_parser = subparsers.add_parser(\"analytics\", help=\"Generate analytics report\")\n    analytics_parser.add_argument(\"--course-id\", help=\"Filter by course ID\")\n    analytics_parser.add_argument(\"--start-date\", help=\"Start date (YYYY-MM-DD)\")\n    analytics_parser.add_argument(\"--end-date\", help=\"End date (YYYY-MM-DD)\")\n    analytics_parser.add_argument(\"--output\", help=\"Output file path\")\n    \n    # History commands\n    history_parser = subparsers.add_parser(\"history\", help=\"Show processing history\")\n    history_parser.add_argument(\"--content-id\", help=\"Filter by content ID\")\n    history_parser.add_argument(\"--agent-id\", help=\"Filter by agent ID\")\n    history_parser.add_argument(\"--operation\", help=\"Filter by operation\")\n    history_parser.add_argument(\"--limit\", type=int, default=20, help=\"Limit results\")\n    \n    # Maintenance commands\n    maintenance_parser = subparsers.add_parser(\"maintenance\", help=\"Perform maintenance operations\")\n    maintenance_parser.add_argument(\"--operation\", required=True, \n                                   choices=[\"vacuum_db\", \"rebuild_index\", \"cleanup_orphans\", \"detect_all_relationships\"],\n                                   help=\"Maintenance operation\")\n    \n    args = parser.parse_args()\n    \n    if not args.command:\n        parser.print_help()\n        return\n    \n    # Initialize CLI tool\n    try:\n        cli = CMSCLITool(args.base_path)\n        \n        # Execute command\n        if args.command == \"create-course\":\n            cli.create_course(args)\n        elif args.command == \"list-courses\":\n            cli.list_courses(args)\n        elif args.command == \"import-content\":\n            cli.import_content(args)\n        elif args.command == \"list-content\":\n            cli.list_content(args)\n        elif args.command == \"search\":\n            cli.search_content(args)\n        elif args.command == \"show-content\":\n            cli.show_content(args)\n        elif args.command == \"detect-relationships\":\n            cli.detect_relationships(args)\n        elif args.command == \"build-index\":\n            cli.build_search_index(args)\n        elif args.command == \"quality-assessment\":\n            cli.quality_assessment(args)\n        elif args.command == \"analytics\":\n            cli.generate_analytics(args)\n        elif args.command == \"history\":\n            cli.show_processing_history(args)\n        elif args.command == \"maintenance\":\n            cli.maintenance(args)\n        else:\n            print(f\"‚ùå Unknown command: {args.command}\")\n        \n        # Shutdown\n        cli.shutdown()\n        \n    except KeyboardInterrupt:\n        print(\"\\n‚ö†Ô∏è Operation interrupted by user\")\n    except Exception as e:\n        print(f\"‚ùå Unexpected error: {str(e)}\")\n        import traceback\n        if args.verbose:\n            traceback.print_exc()\n\n\nif __name__ == \"__main__\":\n    main()")