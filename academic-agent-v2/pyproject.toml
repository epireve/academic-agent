[tool.poetry]
name = "academic-agent-v2"
version = "0.1.0"
description = "Academic Agent v2 - An advanced academic research and writing assistant"
authors = ["Academic Agent Team <academic-agent@example.com>"]
readme = "README.md"
packages = [
    {include = "agents", from = "src"},
    {include = "core", from = "src"},
    {include = "generators", from = "src"},
    {include = "processors", from = "src"},
    {include = "utils", from = "src"},
]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.104.1"
uvicorn = "^0.24.0"
openai = "^1.3.0"
pydantic = "^2.5.0"
aiofiles = "^23.2.1"
python-multipart = "^0.0.6"
requests = "^2.31.0"
typing-extensions = "^4.8.0"
marker-pdf = "^0.2.14"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
black = "^24.10.0"
flake8 = "^7.0.0"
mypy = "^1.7.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pre-commit = "^3.6.0"
isort = "^5.13.2"
bandit = "^1.7.5"
pydocstyle = "^6.3.0"
commitizen = "^3.13.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=src --cov-report=html --cov-report=term-missing"
asyncio_mode = "auto"

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["agents", "core", "generators", "processors", "utils"]

[tool.bandit]
exclude_dirs = ["tests", "venv", "htmlcov"]
skips = ["B101", "B601"]

[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D104", "D105", "D107"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
version_files = ["pyproject.toml:version"]
tag_format = "v$version"
