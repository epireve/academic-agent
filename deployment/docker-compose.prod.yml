# Production Docker Compose for Academic Agent
version: '3.8'

services:
  # Academic Agent Application
  academic-agent:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    image: academic-agent:latest
    container_name: academic-agent-app-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"
    volumes:
      - ../config:/app/config:ro
      - app_logs:/app/logs
      - app_output:/app/output
      - app_processed:/app/processed
      - app_tmp:/app/tmp
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
      - PROMETHEUS_PORT=9090
      - DATABASE_URL=postgresql://academic_agent:${POSTGRES_PASSWORD}@postgres:5432/academic_agent_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    env_file:
      - .env.prod
    networks:
      - app-network
      - monitoring-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: academic-agent-postgres-prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../deployment/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_DB=academic_agent_prod
      - POSTGRES_USER=academic_agent
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-local=trust
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U academic_agent -d academic_agent_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: academic-agent-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ../deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 512M

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: academic-agent-prometheus-prod
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - ../monitoring/recording_rules.yml:/etc/prometheus/recording_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://localhost:9091'
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G

  grafana:
    image: grafana/grafana:latest
    container_name: academic-agent-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../monitoring/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_SECRET_KEY=${SECRET_KEY}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=grafana
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD}
      - GF_SESSION_PROVIDER=postgres
      - GF_SESSION_PROVIDER_CONFIG=user=grafana password=${GRAFANA_DB_PASSWORD} host=postgres port=5432 dbname=grafana sslmode=disable
    networks:
      - monitoring-network
      - app-network
    depends_on:
      - prometheus
      - postgres
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  alertmanager:
    image: prom/alertmanager:latest
    container_name: academic-agent-alertmanager-prod
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ../monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: academic-agent-loki-prod
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ../monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  promtail:
    image: grafana/promtail:latest
    container_name: academic-agent-promtail-prod
    restart: unless-stopped
    volumes:
      - ../monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - app_logs:/var/log/academic-agent:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring-network
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: academic-agent-node-exporter-prod
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M

  # Reverse proxy (nginx)
  nginx:
    image: nginx:alpine
    container_name: academic-agent-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../deployment/nginx/conf.d:/etc/nginx/conf.d:ro
      - ../deployment/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - app-network
      - monitoring-network
    depends_on:
      - academic-agent
      - grafana
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  # Backup service
  backup:
    image: academic-agent:latest
    container_name: academic-agent-backup-prod
    restart: "no"
    volumes:
      - postgres_data:/backup/postgres:ro
      - redis_data:/backup/redis:ro
      - app_logs:/backup/logs:ro
      - app_output:/backup/output:ro
      - backup_storage:/backup/storage
      - ../deployment/scripts:/scripts:ro
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
    command: ["/scripts/backup.sh"]
    networks:
      - app-network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
  app_logs:
    driver: local
  app_output:
    driver: local
  app_processed:
    driver: local
  app_tmp:
    driver: local
  nginx_logs:
    driver: local
  backup_storage:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16